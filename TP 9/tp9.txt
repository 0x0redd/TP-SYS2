tp 9
othmane ferrah  - Amettich mustapha
binome 7
--------------------------------------------------------------------------

exercie 1 

Ecrire un programme qui crée 2 processus. Le code du 1er processus est remplacé
par le code de la commande ls –l , l’autre par ps –l

Le père devra attendre la fin de ses deux fils et afficher quel a été le premier
processus à terminer.


	othmane@othmane-SATELLITE-C670-12X:~/Documents/tp sys/tp9$ cat exo1.c 
	#include <sys/types.h>
	#include <sys/wait.h>
	#include <unistd.h>
	#include <stdio.h>

	int main(int argc, char * argv[]) {

		pid_t pid1,pid2,pid_premier;
		int processus;
		switch(pid1=fork()) {
		case -1:
			printf("erreur\n");
			break;
		case 0:
			execlp("ls","ls","-al",NULL);
			break;
		default:
			switch(pid2=fork()) {
			case -1:
				printf("erreur\n");
				break;
			case 0:
				execlp("ps","ps","-l",NULL);
				break;
			default:
				break;
		}
			break;
		}
		
		pid_premier = wait(&processus);
		wait(&processus);
		
		printf("\nLe premier processus a finir est : %d\n", (pid_premier==pid1)?1:2);
		return 0;
	}


	othmane@othmane-SATELLITE-C670-12X:~/Documents/tp sys/tp9$ gcc exo1.c 
	othmane@othmane-SATELLITE-C670-12X:~/Documents/tp sys/tp9$ ./a.out 
	total 28
	drwxrwxr-x 2 othmane othmane  4096 أبريل  19 07:17 .
	drwxrwxrwx 7 othmane othmane  4096 أبريل  19 07:08 ..
	-rwxrwxr-x 1 othmane othmane 16168 أبريل  19 07:17 a.out
	-rwxrwxr-x 1 othmane othmane   596 أبريل  19 07:17 exo1.c
	-rw-rw-r-- 1 othmane othmane     0 أبريل  19 07:09 tp9.txt
	F S   UID     PID    PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
	0 S  1000   78481   77631  0  80   0 -  4959 do_wai pts/1    00:00:00 bash
	0 S  1000   78713   78481  0  80   0 -   622 do_wai pts/1    00:00:00 a.out
	4 R  1000   78715   78713  0  80   0 -  5283 -      pts/1    00:00:00 ps

	Le premier processus a finir est : 1


Exercice 2 : 

Création de processus fils et partage des tâches avec son père :

Créer un fichier texte « listeNbPremier » qui contient les nombres de 1 jusqu’à 20.
Un nombre par ligne.

	othmane@othmane-SATELLITE-C670-12X:~/Documents/tp sys/tp9$ cat nbpremier 
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
	11
	12
	13
	14
	15
	16
	17
	18
	19
	20


Construire un programme C qui lit et affiche les 6 premiers nombres du fichier
«listeNbPremier » puis crée un fils
Ce fils continue à lire et afficher (à partir de l’endroit où le père s’est arrêté), les 10
nombres suivants puis meurt. Le fils n’est pas sensé savoir que le père s’est arrêté
au 6ème nombre.
À la mort du processus fils, le père termine sa lecture (à partir de l’endroit où le
père s’est arrêté) jusqu’à la fin du fichier.


	othmane@othmane-SATELLITE-C670-12X:~/Documents/tp sys/tp9$ cat exo2.c 
	#include <stdio.h>
	#include <sys/types.h>
	#include <unistd.h>
	#include <stdlib.h>
	#include <sys/wait.h>

	int main(){

	    int i, j;
	    int pid;
	    FILE *fichier;
	    int attente;

		printf("PID du processus Père : %d\n", getpid());

		printf("affichage des 6 premiers nombres : \n");

		fichier = fopen("nbpremier", "r");

		if (fichier == NULL){
			printf("Fichier introuvable\n");
			exit(-2);
		}
		for (j = 0; j < 6; j++){
			fscanf(fichier, "%d", &i);
			printf("%d\n", i);
		}

		printf("Creation du fils\n");
		pid = 0;
		pid = fork();

		if(pid == -1){
			printf("impossible de creer un fils\n");
			exit(-1);
		} else if (pid == 0){
			printf("PID du processus fils: %d\n", getpid());
	 		printf("Affichage des 10  nombres suivante\n");
	 		for (j = 0; j < 10; j++){
	     			fscanf(fichier, "%d", &i);
	     			printf("%d\n", i);	
			}
	 		fclose(fichier);
	 		printf("le fils est mort\n");
	 		exit(1);
	    	} else {
			printf("Pere attent la mort du Fils\n");
	 		wait(&attente);
	 		printf("Le pere continue la lecture\n");
			while (!feof(fichier)) {
	     			fscanf(fichier, "%d", &i);
	    			printf("%d\n", i);
	 		}

	 		fclose(fichier);
		}
	    	printf("Le pere se termine\n");
	    	return 0;
	}




	othmane@othmane-SATELLITE-C670-12X:~/Documents/tp sys/tp9$ gcc exo2.c 
	othmane@othmane-SATELLITE-C670-12X:~/Documents/tp sys/tp9$ ./a.out 
	PID du processus Père : 79199
	affichage des 6 premiers nombres : 
	1
	2
	3
	4
	5
	6
	Creation du fils
	Pere attent la mort du Fils
	PID du processus fils: 79200
	Affichage des 10  nombres suivante
	7
	8
	9
	10
	11
	12
	13
	14
	15
	16
	le fils est mort
	Le pere continue la lecture
	7
	8
	9
	10
	11
	12
	13
	14
	15
	16
	17
	18
	19
	20
	20
	Le pere se termine

